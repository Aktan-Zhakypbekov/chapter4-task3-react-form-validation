{"version":3,"sources":["SignUpForm.jsx","App.js","index.js"],"names":["SignUpForm","validate","Yup","shape","firstName","min","max","matches","required","lastName","email","password","confirmPassword","oneOf","initialValues","validationSchema","onSubmit","alert","formik","errors","touched","dirty","isValid","className","htmlFor","type","name","component","disabled","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMA4JeA,EAxJI,WACjB,IAOMC,EAAWC,MAAaC,MAAM,CAClCC,UAAWF,MACRG,IAAI,EAAG,sDACPC,IAAI,GAAI,kDACRC,QAAQ,cAAe,yCACvBC,SAAS,uBACZC,SAAUP,MACPG,IAAI,EAAG,qDACPC,IAAI,GAAI,iDACRC,QAAQ,cAAe,wCACvBC,SAAS,sBACZE,MAAOR,MAAaQ,MAAM,sBAAsBF,SAAS,kBACzDG,SAAUT,MACPK,QACC,0CACA,uHAEDC,SAAS,qBACZI,gBAAiBV,MACdW,MAAM,CAACX,IAAQ,YAAa,MAAO,0BACnCM,SAAS,uCAEd,OACE,cAAC,IAAD,CACEM,cA/BW,CACbV,UAAW,GACXK,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,gBAAiB,IA2BfG,iBAAkBd,EAClBe,SAAU,WACRC,MAAM,eAJV,SAOG,SAACC,GACA,IAAQC,EAAoCD,EAApCC,OAAQC,EAA4BF,EAA5BE,QAASC,EAAmBH,EAAnBG,MAAOC,EAAYJ,EAAZI,QAChC,OACE,sBAAKC,UAAU,YAAf,UACE,qBAAKA,UAAU,aAAf,SACE,gDAEF,eAAC,IAAD,CAAMA,UAAU,OAAhB,UACE,qBAAKA,UAAU,aAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,uBAAOC,QAAQ,YAAf,wBACA,cAAC,IAAD,CACEC,KAAK,OACLC,KAAK,YACLH,UACEJ,EAAOf,WAAagB,EAAQhB,UACxB,cACA,gBAGR,cAAC,IAAD,CACEsB,KAAK,YACLC,UAAU,MACVJ,UAAU,mBAIhB,qBAAKA,UAAU,aAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,uBAAOC,QAAQ,WAAf,uBACA,cAAC,IAAD,CACEC,KAAK,OACLC,KAAK,WACLH,UACEJ,EAAOV,UAAYW,EAAQX,SACvB,cACA,gBAGR,cAAC,IAAD,CACEiB,KAAK,WACLC,UAAU,MACVJ,UAAU,mBAIhB,qBAAKA,UAAU,aAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,uBAAOC,QAAQ,QAAf,mBACA,cAAC,IAAD,CACEC,KAAK,QACLC,KAAK,QACLH,UACEJ,EAAOT,OAASU,EAAQV,MACpB,cACA,gBAGR,cAAC,IAAD,CACEgB,KAAK,QACLC,UAAU,MACVJ,UAAU,mBAIhB,qBAAKA,UAAU,aAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,uBAAOC,QAAQ,WAAf,sBACA,cAAC,IAAD,CACEC,KAAK,WACLC,KAAK,WACLH,UACEJ,EAAOR,UAAYS,EAAQT,SACvB,cACA,gBAGR,cAAC,IAAD,CACEe,KAAK,WACLC,UAAU,MACVJ,UAAU,mBAIhB,qBAAKA,UAAU,aAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,uBAAOC,QAAQ,kBAAf,8BACA,cAAC,IAAD,CACEC,KAAK,WACLC,KAAK,kBACLH,UACEJ,EAAOP,iBAAmBQ,EAAQR,gBAC9B,cACA,gBAGR,cAAC,IAAD,CACEc,KAAK,kBACLC,UAAU,MACVJ,UAAU,mBAIhB,wBAAQE,KAAK,SAASG,WAAYP,GAASC,GAA3C,+BC9HCO,MAhBf,WACE,OACE,sBAAKN,UAAU,YAAf,UACE,wBAAQA,UAAU,SAAlB,SACE,2DAEF,sBAAMA,UAAU,OAAhB,SACE,cAAC,EAAD,MAEF,wBAAQA,UAAU,SAAlB,SACE,uDCPRO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.0321c351.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst SignUpForm = () => {\r\n  const values = {\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n  };\r\n  const validate = Yup.object().shape({\r\n    firstName: Yup.string()\r\n      .min(2, 'First name should be at least 2 characters or more')\r\n      .max(30, 'First name cannot be longer than 30 characters')\r\n      .matches(/^([^0-9]*)$/, 'First name should not contain numbers')\r\n      .required('First name required'),\r\n    lastName: Yup.string()\r\n      .min(2, 'Last name should be at least 2 characters or more')\r\n      .max(40, 'Last name cannot be longer than 40 characters')\r\n      .matches(/^([^0-9]*)$/, 'Last name should not contain numbers')\r\n      .required('Last name required'),\r\n    email: Yup.string().email('Wrong email format').required('Email required'),\r\n    password: Yup.string()\r\n      .matches(\r\n        /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/,\r\n        'Password must contain at least 1 number, 1 lowercase and 1 uppercase letter and must be between 6 and 20 characters'\r\n      )\r\n      .required('Password required'),\r\n    confirmPassword: Yup.string()\r\n      .oneOf([Yup.ref('password'), null], 'Passwords do not match')\r\n      .required('You need to confirm your password'),\r\n  });\r\n  return (\r\n    <Formik\r\n      initialValues={values}\r\n      validationSchema={validate}\r\n      onSubmit={() => {\r\n        alert('Submitted!');\r\n      }}\r\n    >\r\n      {(formik) => {\r\n        const { errors, touched, dirty, isValid } = formik;\r\n        return (\r\n          <div className='form-cont'>\r\n            <div className='form-title'>\r\n              <h2>Sign Up Form</h2>\r\n            </div>\r\n            <Form className='form'>\r\n              <div className='input-cont'>\r\n                <div className='input-cont__inner'>\r\n                  <label htmlFor='firstName'>First name</label>\r\n                  <Field\r\n                    type='text'\r\n                    name='firstName'\r\n                    className={\r\n                      errors.firstName && touched.firstName\r\n                        ? 'input-error'\r\n                        : 'input-field'\r\n                    }\r\n                  />\r\n                  <ErrorMessage\r\n                    name='firstName'\r\n                    component='div'\r\n                    className='error-msg'\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='input-cont'>\r\n                <div className='input-cont__inner'>\r\n                  <label htmlFor='lastName'>Last name</label>\r\n                  <Field\r\n                    type='text'\r\n                    name='lastName'\r\n                    className={\r\n                      errors.lastName && touched.lastName\r\n                        ? 'input-error'\r\n                        : 'input-field'\r\n                    }\r\n                  />\r\n                  <ErrorMessage\r\n                    name='lastName'\r\n                    component='div'\r\n                    className='error-msg'\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='input-cont'>\r\n                <div className='input-cont__inner'>\r\n                  <label htmlFor='email'>Email</label>\r\n                  <Field\r\n                    type='email'\r\n                    name='email'\r\n                    className={\r\n                      errors.email && touched.email\r\n                        ? 'input-error'\r\n                        : 'input-field'\r\n                    }\r\n                  />\r\n                  <ErrorMessage\r\n                    name='email'\r\n                    component='div'\r\n                    className='error-msg'\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='input-cont'>\r\n                <div className='input-cont__inner'>\r\n                  <label htmlFor='password'>Password</label>\r\n                  <Field\r\n                    type='password'\r\n                    name='password'\r\n                    className={\r\n                      errors.password && touched.password\r\n                        ? 'input-error'\r\n                        : 'input-field'\r\n                    }\r\n                  />\r\n                  <ErrorMessage\r\n                    name='password'\r\n                    component='div'\r\n                    className='error-msg'\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='input-cont'>\r\n                <div className='input-cont__inner'>\r\n                  <label htmlFor='confirmPassword'>Confirm password</label>\r\n                  <Field\r\n                    type='password'\r\n                    name='confirmPassword'\r\n                    className={\r\n                      errors.confirmPassword && touched.confirmPassword\r\n                        ? 'input-error'\r\n                        : 'input-field'\r\n                    }\r\n                  />\r\n                  <ErrorMessage\r\n                    name='confirmPassword'\r\n                    component='div'\r\n                    className='error-msg'\r\n                  />\r\n                </div>\r\n              </div>\r\n              <button type='submit' disabled={!(dirty && isValid)}>\r\n                Sign Up\r\n              </button>\r\n            </Form>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default SignUpForm;\r\n","import React from 'react';\nimport SignUpForm from './SignUpForm';\n\nfunction App() {\n  return (\n    <div className='main-cont'>\n      <header className='header'>\n        <h1>Form Validation Project</h1>\n      </header>\n      <main className='main'>\n        <SignUpForm />\n      </main>\n      <footer className='footer'>\n        <div>This is footer</div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}